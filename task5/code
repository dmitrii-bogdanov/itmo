package bogdanov.task5;

import java.util.Random;

public class Vector3D {

    public double x;
    public double y;
    public double z;

    public Vector3D(double x, double y, double z) {
        this.x = x;
        this.y = y;
        this.z = z;
    }

    public static Vector3D[] randomVectors(int size) {
        if (size >= 0) {
            Random generator = new Random();
            Vector3D[] array = new Vector3D[size];
            for (int i = 0; i < array.length; i++) {
                array[i] = new Vector3D(
                        generator.nextDouble(),
                        generator.nextDouble(),
                        generator.nextDouble()
                );
            }
            return array;
        }
        return null;
    }

    public double length() {
        return Math.sqrt(x * x + y * y + z * z);
    }

    public double scalarMult(Vector3D vector3D) {
        return this.x * vector3D.x
                + this.y * vector3D.y
                + this.z * vector3D.z;
    }

    public Vector3D vectorMult(Vector3D vector3D) {
        return new Vector3D(
                this.y * vector3D.z - this.z * vector3D.y,
                this.z * vector3D.x - this.x * vector3D.z,
                this.x * vector3D.y - this.y * vector3D.x
        );
    }

    public double cos(Vector3D vector3D) {
        double l = this.length() * vector3D.length();
        return l != 0 ? this.scalarMult(vector3D) / l : -2;
    }

    public void add(Vector3D vector3D) {
        this.x += vector3D.x;
        this.y += vector3D.y;
        this.z += vector3D.z;
    }

    public void sub(Vector3D vector3D) {
        this.x -= vector3D.x;
        this.y -= vector3D.y;
        this.z -= vector3D.z;
    }

    public Vector3D sum(Vector3D v1, Vector3D v2) {
        return new Vector3D(
                v1.x + v2.x,
                v1.y + v2.y,
                v1.z + v2.z
        );
    }

    public Vector3D diff(Vector3D v1, Vector3D v2) {
        return new Vector3D(
                v1.x - v2.x,
                v1.y - v2.y,
                v1.z - v2.z
        );
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = 17 * hash + (int) this.x;
        hash = 17 * hash + (int) this.y;
        hash = 17 * hash + (int) this.z;
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (this == obj) {
            return true;
        }
        if (this.x == ((Vector3D) obj).x
                && this.y == ((Vector3D) obj).y
                && this.z == ((Vector3D) obj).z
        ) {
            return true;
        }
        return false;
    }

    @Override
    public String toString() {
        return String.format(
                "Vector3D{x=%.4f,y=%.4f,z=%.4f}",
                x, y, z
        );
    }
}
