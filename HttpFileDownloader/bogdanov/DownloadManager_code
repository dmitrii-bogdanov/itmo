package bogdanov;

import java.io.File;
import java.io.FileNotFoundException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.*;

import static java.lang.Thread.sleep;

public class DownloadManager {

    private Map<URL, File> links;
    private Thread[] threads;
    private boolean[] isCompleted;

    private DownloadManager(int threadNumber, String outputDir, String links) {
        setThreads(threadNumber);
        setLinks(outputDir, links);
    }

    public static void start(String... args) {
        System.out.println(Arrays.toString(args));
        System.out.println(new File(args[1]).getAbsolutePath());
        if (args.length < 3) {
            System.out.println("3 arguments should be present");
            return;
        }
        int threadNumber = 0;
        try {
            threadNumber = Integer.parseInt(args[0]);
        } catch (NumberFormatException e) {
            System.out.println("First argument should be a positive integer");
            return;
        }
        if (threadNumber < 1) {
            System.out.println("First argument should be a positive integer");
            return;
        }
        (new DownloadManager(threadNumber, args[1], args[2])).run();
    }

    private void setThreads(int threadNumber) {
        threads = new Thread[threadNumber];
    }

    private void setLinks(String outputDir, String links) {
        this.links = (new LinkScanner(links, outputDir)).read();
        isCompleted = new boolean[this.links.size()];
    }

    private void listLinks() {
        StringBuilder sb = new StringBuilder("\n");
        for (Map.Entry e : links.entrySet()) {
            sb.append(e.getKey().toString());
            sb.append(" --> ");
            sb.append(e.getValue().toString());
            sb.append("\n");
        }
        sb.append("\n");
        System.out.println(sb);
    }

    private void run() {
        listLinks();

        Iterator<Map.Entry<URL, File>> linkIterator = links.entrySet().iterator();
        Map.Entry<URL, File> entry;
        int index = 0;
        while (linkIterator.hasNext()) {
            if (index < threads.length) {
                entry = linkIterator.next();
                threads[index] = new Thread(new DownloadRunnable(entry.getKey(), entry.getValue()));
                threads[index++].start();
            } else {
                index = findFreeIndex();
                try {
                    sleep(200);
                } catch (InterruptedException e) {
                    System.out.println(e.getMessage());
                }
            }
        }
        for (Thread t : threads) {
            try {
                if (t != null) {
                    t.join();
                }
            } catch (InterruptedException e) {
            }
        }
        System.out.println("FINISHED");
    }

    private int findFreeIndex() {
        for (int i = 0; i < threads.length; i++) {
            if (threads[i].getState() == Thread.State.TERMINATED) {
                return i;
            }
        }
        return threads.length;
    }
}
