package bogdanov.task7.p2;

public class Shape {

    private double volume;

    public Shape(double volume) {
        this.volume = volume;
    }

    public double getVolume() {
        return volume;
    }
}

package bogdanov.task7.p2;

public class SolidOfRevolution extends Shape{

    private double radius;

    public SolidOfRevolution(double volume, double radius) {
        super(volume);
        this.radius = radius;
    }

    public double getRadius() {
        return radius;
    }

}

package bogdanov.task7.p2;

public class Cylinder extends SolidOfRevolution {

    private double height;

    public Cylinder(double radius, double height) {
        super(Math.PI * radius * radius * height, radius);
        this.height = height;
    }

}

package bogdanov.task7.p2;

public class Ball extends SolidOfRevolution {

    public Ball(double radius) {
        super(Math.PI * radius * radius * radius * 4 / 3, radius);
    }
}

package bogdanov.task7.p2;

public class Pyramid extends Shape {

    private double s;
    private double h;

    public Pyramid(double s, double h) {
        super(s * h / 3);
        this.s = s;
        this.h = h;
    }

}


package bogdanov.task7.p2;

import java.util.ArrayList;
import java.util.List;

public class Box extends Shape {

    private List<Shape> items = new ArrayList<>();

    public Box(double volume) {
        super(volume);
    }

    public boolean add(Shape shape) {
        if (shape != null) {
            double availableVolume = getVolume();
            for (Shape s : items) {
                availableVolume -= s.getVolume();
            }
            if (shape.getVolume() <= availableVolume) {
                items.add(shape);
                return true;
            } else {
                return false;
            }
        }
        return false;
    }

}

